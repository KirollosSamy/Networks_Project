//
// Generated file, do not edit! Created by opp_msgtool 6.0 from frame.msg.
//

#ifndef __FRAME_M_H
#define __FRAME_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class Frame;
class Frame_Base : public ::omnetpp::cPacket
{
protected:
    unsigned int Header = 0;
    omnetpp::opp_string Payload;
    char Trailer = 0; // this carries the check sum. 
    int FrameType = 0;
    unsigned int AckNum = 0;

private:
    void copy(const Frame_Base& other);

protected:
    bool operator==(const Frame_Base&) = delete;
    Frame_Base(const Frame_Base& other);
    // make assignment operator protected to force the user override it
    Frame_Base& operator=(const Frame_Base& other);

public:
    Frame_Base(const char* name = nullptr, short kind = 0);
    virtual ~Frame_Base();
    virtual Frame_Base* dup() const override {
        return new Frame_Base(*this);
    }
    virtual void parsimPack(omnetpp::cCommBuffer* b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer* b) override;

    virtual unsigned int getHeader() const;
    virtual void setHeader(unsigned int Header);

    virtual const char* getPayload() const;
    virtual void setPayload(const char* Payload);

    virtual char getTrailer() const;
    virtual void setTrailer(char Trailer);

    virtual int getFrameType() const;
    virtual void setFrameType(int FrameType);

    virtual unsigned int getAckNum() const;
    virtual void setAckNum(unsigned int AckNum);
};


namespace omnetpp {

    template<> inline Frame_Base* fromAnyPtr(any_ptr ptr) { return check_and_cast<Frame_Base*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __FRAME_M_H

